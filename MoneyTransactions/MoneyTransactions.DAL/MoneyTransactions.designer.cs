#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MoneyTransactions.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="MoneyTransactions")]
	public partial class MoneyTransactionsDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertWallet(Wallet instance);
    partial void UpdateWallet(Wallet instance);
    partial void DeleteWallet(Wallet instance);
    partial void InsertAccountBankDetail(AccountBankDetail instance);
    partial void UpdateAccountBankDetail(AccountBankDetail instance);
    partial void DeleteAccountBankDetail(AccountBankDetail instance);
    partial void InsertBank(Bank instance);
    partial void UpdateBank(Bank instance);
    partial void DeleteBank(Bank instance);
    partial void InsertCryptocurrencyStore(CryptocurrencyStore instance);
    partial void UpdateCryptocurrencyStore(CryptocurrencyStore instance);
    partial void DeleteCryptocurrencyStore(CryptocurrencyStore instance);
    partial void InsertOrder(Order instance);
    partial void UpdateOrder(Order instance);
    partial void DeleteOrder(Order instance);
    partial void InsertOrderDetail(OrderDetail instance);
    partial void UpdateOrderDetail(OrderDetail instance);
    partial void DeleteOrderDetail(OrderDetail instance);
    #endregion
		
		public MoneyTransactionsDataContext() : 
				base(global::MoneyTransactions.DAL.Properties.Settings.Default.MoneyTransactionsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public MoneyTransactionsDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneyTransactionsDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneyTransactionsDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public MoneyTransactionsDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Wallet> Wallets
		{
			get
			{
				return this.GetTable<Wallet>();
			}
		}
		
		public System.Data.Linq.Table<AccountBankDetail> AccountBankDetails
		{
			get
			{
				return this.GetTable<AccountBankDetail>();
			}
		}
		
		public System.Data.Linq.Table<Bank> Banks
		{
			get
			{
				return this.GetTable<Bank>();
			}
		}
		
		public System.Data.Linq.Table<CryptocurrencyStore> CryptocurrencyStores
		{
			get
			{
				return this.GetTable<CryptocurrencyStore>();
			}
		}
		
		public System.Data.Linq.Table<Order> Orders
		{
			get
			{
				return this.GetTable<Order>();
			}
		}
		
		public System.Data.Linq.Table<OrderDetail> OrderDetails
		{
			get
			{
				return this.GetTable<OrderDetail>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AccountID;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private string _Nickname;
		
		private string _Phone;
		
		private EntitySet<Wallet> _Wallets;
		
		private EntitySet<AccountBankDetail> _AccountBankDetails;
		
		private EntitySet<Order> _Orders;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountIDChanging(System.Guid value);
    partial void OnAccountIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnNicknameChanging(string value);
    partial void OnNicknameChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    #endregion
		
		public Account()
		{
			this._Wallets = new EntitySet<Wallet>(new Action<Wallet>(this.attach_Wallets), new Action<Wallet>(this.detach_Wallets));
			this._AccountBankDetails = new EntitySet<AccountBankDetail>(new Action<AccountBankDetail>(this.attach_AccountBankDetails), new Action<AccountBankDetail>(this.detach_AccountBankDetails));
			this._Orders = new EntitySet<Order>(new Action<Order>(this.attach_Orders), new Action<Order>(this.detach_Orders));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(200)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(200)")]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(MAX)")]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nickname", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Nickname
		{
			get
			{
				return this._Nickname;
			}
			set
			{
				if ((this._Nickname != value))
				{
					this.OnNicknameChanging(value);
					this.SendPropertyChanging();
					this._Nickname = value;
					this.SendPropertyChanged("Nickname");
					this.OnNicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(50)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Wallet", Storage="_Wallets", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Wallet> Wallets
		{
			get
			{
				return this._Wallets;
			}
			set
			{
				this._Wallets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountBankDetail", Storage="_AccountBankDetails", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<AccountBankDetail> AccountBankDetails
		{
			get
			{
				return this._AccountBankDetails;
			}
			set
			{
				this._AccountBankDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Orders", ThisKey="AccountID", OtherKey="AccountID")]
		public EntitySet<Order> Orders
		{
			get
			{
				return this._Orders;
			}
			set
			{
				this._Orders.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Wallets(Wallet entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Wallets(Wallet entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_AccountBankDetails(AccountBankDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_AccountBankDetails(AccountBankDetail entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
		
		private void attach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = this;
		}
		
		private void detach_Orders(Order entity)
		{
			this.SendPropertyChanging();
			entity.Account = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Wallet")]
	public partial class Wallet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _WalletID;
		
		private string _WalletAddress;
		
		private System.Nullable<decimal> _BalanceAmount;
		
		private System.Nullable<decimal> _BalanceAmountTransaction;
		
		private System.Guid _AccountID;
		
		private string _PrivateKey;
		
		private EntitySet<CryptocurrencyStore> _CryptocurrencyStores;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnWalletIDChanging(System.Guid value);
    partial void OnWalletIDChanged();
    partial void OnWalletAddressChanging(string value);
    partial void OnWalletAddressChanged();
    partial void OnBalanceAmountChanging(System.Nullable<decimal> value);
    partial void OnBalanceAmountChanged();
    partial void OnBalanceAmountTransactionChanging(System.Nullable<decimal> value);
    partial void OnBalanceAmountTransactionChanged();
    partial void OnAccountIDChanging(System.Guid value);
    partial void OnAccountIDChanged();
    partial void OnPrivateKeyChanging(string value);
    partial void OnPrivateKeyChanged();
    #endregion
		
		public Wallet()
		{
			this._CryptocurrencyStores = new EntitySet<CryptocurrencyStore>(new Action<CryptocurrencyStore>(this.attach_CryptocurrencyStores), new Action<CryptocurrencyStore>(this.detach_CryptocurrencyStores));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalletID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid WalletID
		{
			get
			{
				return this._WalletID;
			}
			set
			{
				if ((this._WalletID != value))
				{
					this.OnWalletIDChanging(value);
					this.SendPropertyChanging();
					this._WalletID = value;
					this.SendPropertyChanged("WalletID");
					this.OnWalletIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalletAddress", DbType="NVarChar(MAX)")]
		public string WalletAddress
		{
			get
			{
				return this._WalletAddress;
			}
			set
			{
				if ((this._WalletAddress != value))
				{
					this.OnWalletAddressChanging(value);
					this.SendPropertyChanging();
					this._WalletAddress = value;
					this.SendPropertyChanged("WalletAddress");
					this.OnWalletAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceAmount", DbType="Money")]
		public System.Nullable<decimal> BalanceAmount
		{
			get
			{
				return this._BalanceAmount;
			}
			set
			{
				if ((this._BalanceAmount != value))
				{
					this.OnBalanceAmountChanging(value);
					this.SendPropertyChanging();
					this._BalanceAmount = value;
					this.SendPropertyChanged("BalanceAmount");
					this.OnBalanceAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BalanceAmountTransaction", DbType="Money")]
		public System.Nullable<decimal> BalanceAmountTransaction
		{
			get
			{
				return this._BalanceAmountTransaction;
			}
			set
			{
				if ((this._BalanceAmountTransaction != value))
				{
					this.OnBalanceAmountTransactionChanging(value);
					this.SendPropertyChanging();
					this._BalanceAmountTransaction = value;
					this.SendPropertyChanged("BalanceAmountTransaction");
					this.OnBalanceAmountTransactionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrivateKey", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PrivateKey
		{
			get
			{
				return this._PrivateKey;
			}
			set
			{
				if ((this._PrivateKey != value))
				{
					this.OnPrivateKeyChanging(value);
					this.SendPropertyChanging();
					this._PrivateKey = value;
					this.SendPropertyChanged("PrivateKey");
					this.OnPrivateKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wallet_CryptocurrencyStore", Storage="_CryptocurrencyStores", ThisKey="WalletID", OtherKey="WalletID")]
		public EntitySet<CryptocurrencyStore> CryptocurrencyStores
		{
			get
			{
				return this._CryptocurrencyStores;
			}
			set
			{
				this._CryptocurrencyStores.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Wallet", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Wallets.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Wallets.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CryptocurrencyStores(CryptocurrencyStore entity)
		{
			this.SendPropertyChanging();
			entity.Wallet = this;
		}
		
		private void detach_CryptocurrencyStores(CryptocurrencyStore entity)
		{
			this.SendPropertyChanging();
			entity.Wallet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccountBankDetail")]
	public partial class AccountBankDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _AccountNumber;
		
		private string _CardNumber;
		
		private System.Nullable<System.DateTimeOffset> _ExpiredDate;
		
		private System.Guid _BankID;
		
		private System.Guid _AccountID;
		
		private System.Guid _AccountBankDetailID;
		
		private EntityRef<Account> _Account;
		
		private EntityRef<Bank> _Bank;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccountNumberChanging(string value);
    partial void OnAccountNumberChanged();
    partial void OnCardNumberChanging(string value);
    partial void OnCardNumberChanged();
    partial void OnExpiredDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnExpiredDateChanged();
    partial void OnBankIDChanging(System.Guid value);
    partial void OnBankIDChanged();
    partial void OnAccountIDChanging(System.Guid value);
    partial void OnAccountIDChanged();
    partial void OnAccountBankDetailIDChanging(System.Guid value);
    partial void OnAccountBankDetailIDChanged();
    #endregion
		
		public AccountBankDetail()
		{
			this._Account = default(EntityRef<Account>);
			this._Bank = default(EntityRef<Bank>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountNumber", DbType="NVarChar(MAX)")]
		public string AccountNumber
		{
			get
			{
				return this._AccountNumber;
			}
			set
			{
				if ((this._AccountNumber != value))
				{
					this.OnAccountNumberChanging(value);
					this.SendPropertyChanging();
					this._AccountNumber = value;
					this.SendPropertyChanged("AccountNumber");
					this.OnAccountNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumber", DbType="NVarChar(MAX)")]
		public string CardNumber
		{
			get
			{
				return this._CardNumber;
			}
			set
			{
				if ((this._CardNumber != value))
				{
					this.OnCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CardNumber = value;
					this.SendPropertyChanged("CardNumber");
					this.OnCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpiredDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ExpiredDate
		{
			get
			{
				return this._ExpiredDate;
			}
			set
			{
				if ((this._ExpiredDate != value))
				{
					this.OnExpiredDateChanging(value);
					this.SendPropertyChanging();
					this._ExpiredDate = value;
					this.SendPropertyChanged("ExpiredDate");
					this.OnExpiredDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					if (this._Bank.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountBankDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AccountBankDetailID
		{
			get
			{
				return this._AccountBankDetailID;
			}
			set
			{
				if ((this._AccountBankDetailID != value))
				{
					this.OnAccountBankDetailIDChanging(value);
					this.SendPropertyChanging();
					this._AccountBankDetailID = value;
					this.SendPropertyChanged("AccountBankDetailID");
					this.OnAccountBankDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_AccountBankDetail", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.AccountBankDetails.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.AccountBankDetails.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_AccountBankDetail", Storage="_Bank", ThisKey="BankID", OtherKey="BankID", IsForeignKey=true)]
		public Bank Bank
		{
			get
			{
				return this._Bank.Entity;
			}
			set
			{
				Bank previousValue = this._Bank.Entity;
				if (((previousValue != value) 
							|| (this._Bank.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Bank.Entity = null;
						previousValue.AccountBankDetails.Remove(this);
					}
					this._Bank.Entity = value;
					if ((value != null))
					{
						value.AccountBankDetails.Add(this);
						this._BankID = value.BankID;
					}
					else
					{
						this._BankID = default(System.Guid);
					}
					this.SendPropertyChanged("Bank");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Bank")]
	public partial class Bank : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _BankID;
		
		private string _BankName;
		
		private EntitySet<AccountBankDetail> _AccountBankDetails;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnBankIDChanging(System.Guid value);
    partial void OnBankIDChanged();
    partial void OnBankNameChanging(string value);
    partial void OnBankNameChanged();
    #endregion
		
		public Bank()
		{
			this._AccountBankDetails = new EntitySet<AccountBankDetail>(new Action<AccountBankDetail>(this.attach_AccountBankDetails), new Action<AccountBankDetail>(this.detach_AccountBankDetails));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid BankID
		{
			get
			{
				return this._BankID;
			}
			set
			{
				if ((this._BankID != value))
				{
					this.OnBankIDChanging(value);
					this.SendPropertyChanging();
					this._BankID = value;
					this.SendPropertyChanged("BankID");
					this.OnBankIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BankName", DbType="NVarChar(50)")]
		public string BankName
		{
			get
			{
				return this._BankName;
			}
			set
			{
				if ((this._BankName != value))
				{
					this.OnBankNameChanging(value);
					this.SendPropertyChanging();
					this._BankName = value;
					this.SendPropertyChanged("BankName");
					this.OnBankNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Bank_AccountBankDetail", Storage="_AccountBankDetails", ThisKey="BankID", OtherKey="BankID")]
		public EntitySet<AccountBankDetail> AccountBankDetails
		{
			get
			{
				return this._AccountBankDetails;
			}
			set
			{
				this._AccountBankDetails.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccountBankDetails(AccountBankDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bank = this;
		}
		
		private void detach_AccountBankDetails(AccountBankDetail entity)
		{
			this.SendPropertyChanging();
			entity.Bank = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CryptocurrencyStore")]
	public partial class CryptocurrencyStore : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _CryptocurrencyStoreID;
		
		private string _MoneyType;
		
		private string _Description;
		
		private System.Guid _WalletID;
		
		private EntityRef<Wallet> _Wallet;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCryptocurrencyStoreIDChanging(System.Guid value);
    partial void OnCryptocurrencyStoreIDChanged();
    partial void OnMoneyTypeChanging(string value);
    partial void OnMoneyTypeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnWalletIDChanging(System.Guid value);
    partial void OnWalletIDChanged();
    #endregion
		
		public CryptocurrencyStore()
		{
			this._Wallet = default(EntityRef<Wallet>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CryptocurrencyStoreID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid CryptocurrencyStoreID
		{
			get
			{
				return this._CryptocurrencyStoreID;
			}
			set
			{
				if ((this._CryptocurrencyStoreID != value))
				{
					this.OnCryptocurrencyStoreIDChanging(value);
					this.SendPropertyChanging();
					this._CryptocurrencyStoreID = value;
					this.SendPropertyChanged("CryptocurrencyStoreID");
					this.OnCryptocurrencyStoreIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyType", DbType="NVarChar(300)")]
		public string MoneyType
		{
			get
			{
				return this._MoneyType;
			}
			set
			{
				if ((this._MoneyType != value))
				{
					this.OnMoneyTypeChanging(value);
					this.SendPropertyChanging();
					this._MoneyType = value;
					this.SendPropertyChanged("MoneyType");
					this.OnMoneyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WalletID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid WalletID
		{
			get
			{
				return this._WalletID;
			}
			set
			{
				if ((this._WalletID != value))
				{
					if (this._Wallet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWalletIDChanging(value);
					this.SendPropertyChanging();
					this._WalletID = value;
					this.SendPropertyChanged("WalletID");
					this.OnWalletIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Wallet_CryptocurrencyStore", Storage="_Wallet", ThisKey="WalletID", OtherKey="WalletID", IsForeignKey=true)]
		public Wallet Wallet
		{
			get
			{
				return this._Wallet.Entity;
			}
			set
			{
				Wallet previousValue = this._Wallet.Entity;
				if (((previousValue != value) 
							|| (this._Wallet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Wallet.Entity = null;
						previousValue.CryptocurrencyStores.Remove(this);
					}
					this._Wallet.Entity = value;
					if ((value != null))
					{
						value.CryptocurrencyStores.Add(this);
						this._WalletID = value.WalletID;
					}
					else
					{
						this._WalletID = default(System.Guid);
					}
					this.SendPropertyChanged("Wallet");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Order]")]
	public partial class Order : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderID;
		
		private System.Nullable<decimal> _Amount;
		
		private System.Nullable<decimal> _AmountBought;
		
		private System.Nullable<System.DateTimeOffset> _CreatedDate;
		
		private System.Nullable<System.DateTimeOffset> _ModifiedDate;
		
		private System.Guid _AccountID;
		
		private string _OrderType;
		
		private EntitySet<OrderDetail> _OrderDetails;
		
		private EntityRef<Account> _Account;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnAmountChanging(System.Nullable<decimal> value);
    partial void OnAmountChanged();
    partial void OnAmountBoughtChanging(System.Nullable<decimal> value);
    partial void OnAmountBoughtChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnCreatedDateChanged();
    partial void OnModifiedDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnModifiedDateChanged();
    partial void OnAccountIDChanging(System.Guid value);
    partial void OnAccountIDChanged();
    partial void OnOrderTypeChanging(string value);
    partial void OnOrderTypeChanged();
    #endregion
		
		public Order()
		{
			this._OrderDetails = new EntitySet<OrderDetail>(new Action<OrderDetail>(this.attach_OrderDetails), new Action<OrderDetail>(this.detach_OrderDetails));
			this._Account = default(EntityRef<Account>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money")]
		public System.Nullable<decimal> Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AmountBought", DbType="Money")]
		public System.Nullable<decimal> AmountBought
		{
			get
			{
				return this._AmountBought;
			}
			set
			{
				if ((this._AmountBought != value))
				{
					this.OnAmountBoughtChanging(value);
					this.SendPropertyChanging();
					this._AmountBought = value;
					this.SendPropertyChanged("AmountBought");
					this.OnAmountBoughtChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModifiedDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> ModifiedDate
		{
			get
			{
				return this._ModifiedDate;
			}
			set
			{
				if ((this._ModifiedDate != value))
				{
					this.OnModifiedDateChanging(value);
					this.SendPropertyChanging();
					this._ModifiedDate = value;
					this.SendPropertyChanged("ModifiedDate");
					this.OnModifiedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccountID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid AccountID
		{
			get
			{
				return this._AccountID;
			}
			set
			{
				if ((this._AccountID != value))
				{
					if (this._Account.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccountIDChanging(value);
					this.SendPropertyChanging();
					this._AccountID = value;
					this.SendPropertyChanged("AccountID");
					this.OnAccountIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderType", DbType="NVarChar(100)")]
		public string OrderType
		{
			get
			{
				return this._OrderType;
			}
			set
			{
				if ((this._OrderType != value))
				{
					this.OnOrderTypeChanging(value);
					this.SendPropertyChanging();
					this._OrderType = value;
					this.SendPropertyChanged("OrderType");
					this.OnOrderTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_OrderDetails", ThisKey="OrderID", OtherKey="OrderID")]
		public EntitySet<OrderDetail> OrderDetails
		{
			get
			{
				return this._OrderDetails;
			}
			set
			{
				this._OrderDetails.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Account_Order", Storage="_Account", ThisKey="AccountID", OtherKey="AccountID", IsForeignKey=true)]
		public Account Account
		{
			get
			{
				return this._Account.Entity;
			}
			set
			{
				Account previousValue = this._Account.Entity;
				if (((previousValue != value) 
							|| (this._Account.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Account.Entity = null;
						previousValue.Orders.Remove(this);
					}
					this._Account.Entity = value;
					if ((value != null))
					{
						value.Orders.Add(this);
						this._AccountID = value.AccountID;
					}
					else
					{
						this._AccountID = default(System.Guid);
					}
					this.SendPropertyChanged("Account");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = this;
		}
		
		private void detach_OrderDetails(OrderDetail entity)
		{
			this.SendPropertyChanging();
			entity.Order = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDetail")]
	public partial class OrderDetail : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _OrderDetailID;
		
		private System.Guid _OrderID;
		
		private System.Guid _SalerID;
		
		private System.Guid _BuyerID;
		
		private string _MoneyType;
		
		private System.Nullable<System.DateTimeOffset> _CreatedDate;
		
		private decimal _Amount;
		
		private EntityRef<Order> _Order;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrderDetailIDChanging(System.Guid value);
    partial void OnOrderDetailIDChanged();
    partial void OnOrderIDChanging(System.Guid value);
    partial void OnOrderIDChanged();
    partial void OnSalerIDChanging(System.Guid value);
    partial void OnSalerIDChanged();
    partial void OnBuyerIDChanging(System.Guid value);
    partial void OnBuyerIDChanged();
    partial void OnMoneyTypeChanging(string value);
    partial void OnMoneyTypeChanged();
    partial void OnCreatedDateChanging(System.Nullable<System.DateTimeOffset> value);
    partial void OnCreatedDateChanged();
    partial void OnAmountChanging(decimal value);
    partial void OnAmountChanged();
    #endregion
		
		public OrderDetail()
		{
			this._Order = default(EntityRef<Order>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderDetailID", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid OrderDetailID
		{
			get
			{
				return this._OrderDetailID;
			}
			set
			{
				if ((this._OrderDetailID != value))
				{
					this.OnOrderDetailIDChanging(value);
					this.SendPropertyChanging();
					this._OrderDetailID = value;
					this.SendPropertyChanged("OrderDetailID");
					this.OnOrderDetailIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrderID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid OrderID
		{
			get
			{
				return this._OrderID;
			}
			set
			{
				if ((this._OrderID != value))
				{
					if (this._Order.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrderIDChanging(value);
					this.SendPropertyChanging();
					this._OrderID = value;
					this.SendPropertyChanged("OrderID");
					this.OnOrderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SalerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid SalerID
		{
			get
			{
				return this._SalerID;
			}
			set
			{
				if ((this._SalerID != value))
				{
					this.OnSalerIDChanging(value);
					this.SendPropertyChanging();
					this._SalerID = value;
					this.SendPropertyChanged("SalerID");
					this.OnSalerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BuyerID", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid BuyerID
		{
			get
			{
				return this._BuyerID;
			}
			set
			{
				if ((this._BuyerID != value))
				{
					this.OnBuyerIDChanging(value);
					this.SendPropertyChanging();
					this._BuyerID = value;
					this.SendPropertyChanged("BuyerID");
					this.OnBuyerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MoneyType", DbType="NVarChar(300)")]
		public string MoneyType
		{
			get
			{
				return this._MoneyType;
			}
			set
			{
				if ((this._MoneyType != value))
				{
					this.OnMoneyTypeChanging(value);
					this.SendPropertyChanging();
					this._MoneyType = value;
					this.SendPropertyChanged("MoneyType");
					this.OnMoneyTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CreatedDate", DbType="DateTimeOffset")]
		public System.Nullable<System.DateTimeOffset> CreatedDate
		{
			get
			{
				return this._CreatedDate;
			}
			set
			{
				if ((this._CreatedDate != value))
				{
					this.OnCreatedDateChanging(value);
					this.SendPropertyChanging();
					this._CreatedDate = value;
					this.SendPropertyChanged("CreatedDate");
					this.OnCreatedDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Money NOT NULL")]
		public decimal Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Order_OrderDetail", Storage="_Order", ThisKey="OrderID", OtherKey="OrderID", IsForeignKey=true)]
		public Order Order
		{
			get
			{
				return this._Order.Entity;
			}
			set
			{
				Order previousValue = this._Order.Entity;
				if (((previousValue != value) 
							|| (this._Order.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Order.Entity = null;
						previousValue.OrderDetails.Remove(this);
					}
					this._Order.Entity = value;
					if ((value != null))
					{
						value.OrderDetails.Add(this);
						this._OrderID = value.OrderID;
					}
					else
					{
						this._OrderID = default(System.Guid);
					}
					this.SendPropertyChanged("Order");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
